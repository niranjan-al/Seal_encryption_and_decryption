import type { Signer } from '@mysten/sui/cryptography';
import type { SealCompatibleClient } from './types.js';
export declare const RequestFormat: import("@mysten/bcs").BcsStruct<{
    ptb: import("@mysten/bcs").BcsType<number[], Iterable<number> & {
        length: number;
    }, string>;
    encKey: import("@mysten/bcs").BcsType<number[], Iterable<number> & {
        length: number;
    }, string>;
    encVerificationKey: import("@mysten/bcs").BcsType<number[], Iterable<number> & {
        length: number;
    }, string>;
}, string>;
export type Certificate = {
    user: string;
    session_vk: string;
    creation_time: number;
    ttl_min: number;
    signature: string;
    mvr_name?: string;
};
export type ExportedSessionKey = {
    address: string;
    packageId: string;
    mvrName?: string;
    creationTimeMs: number;
    ttlMin: number;
    personalMessageSignature?: string;
    sessionKey: string;
};
export declare class SessionKey {
    #private;
    private constructor();
    /**
     * Create a new SessionKey instance.
     * @param address - The address of the user.
     * @param packageId - The ID of the package.
     * @param mvrName - Optional. The name of the MVR, if there is one.
     * @param ttlMin - The TTL in minutes.
     * @param signer - Optional. The signer instance, e.g. EnokiSigner.
     * @param suiClient - The Sui client.
     * @returns A new SessionKey instance.
     */
    static create({ address, packageId, mvrName, ttlMin, signer, suiClient, }: {
        address: string;
        packageId: string;
        mvrName?: string;
        ttlMin: number;
        signer?: Signer;
        suiClient: SealCompatibleClient;
    }): Promise<SessionKey>;
    isExpired(): boolean;
    getAddress(): string;
    getPackageName(): string;
    getPackageId(): string;
    getPersonalMessage(): Uint8Array;
    setPersonalMessageSignature(personalMessageSignature: string): Promise<void>;
    getCertificate(): Promise<Certificate>;
    /**
     * Create request params for the given transaction bytes.
     * @param txBytes - The transaction bytes.
     * @returns The request params containing the ephemeral secret key,
     * its public key and its verification key.
     */
    createRequestParams(txBytes: Uint8Array): Promise<{
        encKey: Uint8Array<ArrayBuffer>;
        encKeyPk: Uint8Array<ArrayBuffer>;
        encVerificationKey: Uint8Array<ArrayBuffer>;
        requestSignature: string;
    }>;
    /**
     * Export the Session Key object from the instance. Store the object in IndexedDB to persist.
     */
    export(): ExportedSessionKey;
    /**
     * Restore a SessionKey instance for the given object.
     * @returns A new SessionKey instance with restored state
     */
    static import(data: ExportedSessionKey, suiClient: SealCompatibleClient, signer?: Signer): SessionKey;
}
