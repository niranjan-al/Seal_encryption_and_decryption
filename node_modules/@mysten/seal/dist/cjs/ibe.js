"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ibe_exports = {};
__export(ibe_exports, {
  BonehFranklinBLS12381Services: () => BonehFranklinBLS12381Services,
  DST_POP: () => DST_POP,
  IBEServers: () => IBEServers,
  decryptRandomness: () => decryptRandomness,
  verifyNonce: () => verifyNonce
});
module.exports = __toCommonJS(ibe_exports);
var import_bcs = require("@mysten/bcs");
var import_bls12381 = require("./bls12381.js");
var import_kdf = require("./kdf.js");
var import_utils = require("./utils.js");
const DST_POP = new TextEncoder().encode("SUI-SEAL-IBE-BLS12381-POP-00");
class IBEServers {
  constructor(objectIds) {
    this.objectIds = objectIds;
  }
}
class BonehFranklinBLS12381Services extends IBEServers {
  constructor(services) {
    super(services.map((service) => service.objectId));
    this.publicKeys = services.map((service) => import_bls12381.G2Element.fromBytes(service.pk));
  }
  encryptBatched(id, shares, baseKey, threshold) {
    if (this.publicKeys.length === 0 || this.publicKeys.length !== shares.length) {
      throw new Error("Invalid public keys");
    }
    const [r, nonce, keys] = encapBatched(this.publicKeys, id);
    const encryptedShares = shares.map(
      ({ share, index }, i) => (0, import_utils.xor)(share, (0, import_kdf.kdf)(keys[i], nonce, id, this.objectIds[i], index))
    );
    const randomnessKey = (0, import_kdf.deriveKey)(
      import_kdf.KeyPurpose.EncryptedRandomness,
      baseKey,
      encryptedShares,
      threshold,
      this.objectIds
    );
    const encryptedRandomness = (0, import_utils.xor)(randomnessKey, r.toBytes());
    return {
      BonehFranklinBLS12381: {
        nonce: nonce.toBytes(),
        encryptedShares,
        encryptedRandomness
      },
      $kind: "BonehFranklinBLS12381"
    };
  }
  /**
   * Returns true if the user secret key is valid for the given public key and id.
   * @param user_secret_key - The user secret key.
   * @param id - The identity.
   * @param public_key - The public key.
   * @returns True if the user secret key is valid for the given public key and id.
   */
  static verifyUserSecretKey(userSecretKey, id, publicKey) {
    const lhs = userSecretKey.pairing(import_bls12381.G2Element.generator());
    const rhs = (0, import_kdf.hashToG1)((0, import_bcs.fromHex)(id)).pairing(publicKey);
    return lhs.equals(rhs);
  }
  /**
   * Identity-based decryption.
   *
   * @param nonce The encryption nonce.
   * @param sk The user secret key.
   * @param ciphertext The encrypted message.
   * @param info An info parameter also included in the KDF.
   * @returns The decrypted message.
   */
  static decrypt(nonce, sk, ciphertext, id, [objectId, index]) {
    return (0, import_utils.xor)(ciphertext, (0, import_kdf.kdf)(decap(nonce, sk), nonce, id, objectId, index));
  }
  /**
   * Decrypt all shares and verify that the randomness was used to create the given nonce.
   *
   * @param randomness - The randomness.
   * @param encryptedShares - The encrypted shares.
   * @param services - The services.
   * @param publicKeys - The public keys.
   * @param nonce - The nonce.
   * @param id - The id.
   * @returns All decrypted shares.
   */
  static decryptAllSharesUsingRandomness(randomness, encryptedShares, services, publicKeys, nonce, id) {
    if (publicKeys.length !== encryptedShares.length || publicKeys.length !== services.length) {
      throw new Error("The number of public keys, encrypted shares and services must be the same");
    }
    const gid_r = (0, import_kdf.hashToG1)(id).multiply(randomness);
    return services.map(([objectId, index], i) => {
      return {
        index,
        share: (0, import_utils.xor)(
          encryptedShares[i],
          (0, import_kdf.kdf)(gid_r.pairing(publicKeys[i]), nonce, id, objectId, index)
        )
      };
    });
  }
}
function encapBatched(publicKeys, id) {
  if (publicKeys.length === 0) {
    throw new Error("No public keys provided");
  }
  const r = import_bls12381.Scalar.random();
  const nonce = import_bls12381.G2Element.generator().multiply(r);
  const gid_r = (0, import_kdf.hashToG1)(id).multiply(r);
  return [r, nonce, publicKeys.map((public_key) => gid_r.pairing(public_key))];
}
function decap(nonce, usk) {
  return usk.pairing(nonce);
}
function verifyNonce(nonce, randomness) {
  return import_bls12381.G2Element.generator().multiply(randomness).equals(nonce);
}
function decryptRandomness(encryptedRandomness, randomnessKey) {
  return import_bls12381.Scalar.fromBytes((0, import_utils.xor)(encryptedRandomness, randomnessKey));
}
//# sourceMappingURL=ibe.js.map
